Python Library Documentation: module gapage.gaprasters in gapage

NAME
    gapage.gaprasters

FILE
    t:\scripts\gapage\gapage\gaprasters.py

DESCRIPTION
    ## This module facilitates common tasks for processing rasters.
    ##
    ##
    ## The public functions are:
    ##
    ## SpModel() -- Finds the path to the species' model on Clownfish
    ##
    ## RemoveEmptyRasters() -- Deletes empty rasters from the passed directory.
    ##
    ## CompareRasterProperties() -- Compares the raster properties in the given
    ##      workspace to those of the reference raster.
    ##
    ## RasterPropertiesDictionaries() -- Returns dictionaries of the raster's
    ##      properties.
    ##
    ## GetSnapGrid() -- Returns the path to the GAP snap raster
    ##
    ## SubtractRasters() -- Subtracts one raster from another, but avoids the extent
    ##      and NoData issues of default raster calculations
    ##
    ## ValueField() -- Gets the name of the raster's value field
    ##
    ## RasterType() -- Gets the name of the raster's file format
    ##
    ## SetNullsToValue() -- Change NoData or Null values in a raster to the passed
    ##       value. Overwrites the input raster. Returns the input raster's path/name.
    ##
    ## CheckModelVAT() -- Checks to see that a valid raster attribute table exists
    ##      and that

FUNCTIONS
    CheckModelVAT(workspace)
        (path) -> dict
        
        Returns a dictionary of lists, one for each error that the function tests for.
            It looks for tables with a count of values less than zero, raster values
            greater than 3, and rasters with no VAT.  Designed for testing GAP species
            model output specifically.
        
        
        Argument:
        workspace -- The directory holding the rasters that you want to scan and test.
        
        Examples:
        >>> CheckModelVAT('X:/Name/Name2')
        {'Negatives': [], 'NoVAT': [], 'OverThree': []}
    
    CompareRasterProperties(directory, referenceRaster='', wildcard='', field='', omitProperties=[])
        (string, [string], [string], [string], [list]) -> list, list
        
        Compares the raster properties in the given workspace to those of the
            reference raster; prints discrepancies and returns two lists, the first
            of which contains the names of rasters with properties that match those
            of the reference file, and the second of which contains names of rasters
            with properties that do not match those of the reference file.
        
        Arguments:
        directory -- The directory containing the rasters that you wish to compare
            to the reference raster.
        referenceRaster -- An optional parameter indicating the raster to which you
            wish to compare all other rasters. If no raster is entered, then the
            first raster encountered in the directory will be treated as the
            reference raster.
        wildcard -- An optional parameter indicating the search string that each
            raster name must match in order to be processed. The parameter treats
            asterisks as any number (including zero) of characters. In this way,
            it works just like ArcGIS wildcards, in which '*x' would match species-
            level GAP data, whereas 'x' would only match rasters named exactly 'x'.
        field -- If you wish to assess the presence or properties of a given raster
            attribute, you may enter the exact field name.
        omitProperties -- An optional list indicating the names of properties that
            you do not wish to examine. For example, in comparing the Gap Analysis
            results, one would pass ['maximum', 'pixelType'] as this argument,
            because the rasters all have difference maximum values and they have a
            range of pixelTypes, and we would not want these known differences to
            return mismatches of which we are already aware.
        
        Examples:
        >>> gappack.gaprasters.CompareRasterProperties(myRasterDirectory)
        
        >>> gappack.gaprasters.CompareRasterProperties(myRasterDirectory, myCorrectRaster, 'a*', 'count', ['maximum', 'pixelType', 'noDataValue'])
    
    GetSnapGrid()
        () -> str
        
        Returns the path to a valid GAP snap raster.
    
    RasterPropertiesDictionaries(raster, omitProperties=[], field='')
        (string, [list], [string]) -> dictionary, dictionary, dictionary
        
        Returns three dictionaries:
            1) Keys represent the raster's describe property names, with values
                being the actual properties for the given raster
            2) Keys represent the raster's raster property names, with values
                being the actual properties for the given raster
            3) Keys represent the field property names, with values being the actual
                properties for the given field
        
        Arguments:
        raster -- The raster name or the full path to the raster (if the workspace is not
            set to the raster's directory).
        omitProperties -- An optional list of properties to omit from the results.
        field -- An optional string indicating the field for which you wish to
            return a dictionary of properties.
        
        Example:
        >>> gap.gaprasters.RasterPropertiesDictionaries(myRaster)
        
        >>> gap.gaprasters.RasterPropertiesDictionaries(myRaster, field='count')
    
    RasterType(raster)
        (str) -> str
        
        Returns the name of the raster's file type
    
    RemoveEmptyRasters(directory=False)
        (string) -> list, list
        
        Searches the passed directory for empty rasters and deletes them; returns
        a list of the valid rasters remaining in the directory and a list of the
        deleted rasters.
        
        Argument:
        directory -- An optional parameter indicating the name of the directory or
            the absolute path to the directory you wish to clean up. If no argument
            is entered, the process will run on the current arcpy workspace. In
            either case, the function will reset the workspace to the original arcpy
            workspace prior to returning to the script that called it.
    
    SetNullsToValue(raster, value)
        (str, int/float) -> str
        
        Change NoData or Null values in a raster to the passed value. Overwrites
          the input raster. Returns the input raster's path/name.
        
        Note that zeroes will fill the entire square extent of the raster and may
          not be restricted to your area of interest. Changing NoData cells to a
          value can greatly increase the size of your file.
        
        Arguments:
        raster - The name/path of the raster you wish to update.
        value - The value to which you wish to change NoData cells.
    
    SpModel(sp)
        (str) -> str
        
        Return the path to the final, mosaicked distribution raster for the species.
            Returns False if no model is found.
        
        Argument:
        sp -- The species' 6-character GAP unique ID...capitalization irrelevant.
        
        Examples:
        >>> SpModel('bBAEAx')
        \QNAPNAS1\Clownfish\NAT_Data\Nat_Models_BirdBAEAx
        >>> SpModel('flurbx')
        False
    
    SubtractRasters(inRaster, subRaster, outRaster)
        (str, str, str) -> str
        
        Performs a raster subtraction, but avoids the extent/NoData issues that
            plague the raster calculator.
        
        Arguments:
        inRaster -- The input raster, from which the subRaster will be subtracted
        subRaster -- The raster containing values to be subtracted from inRaster
        outRaster -- The path/name of the desired output raster
    
    ValueField(raster)
        (str) -> str
        
        Returns the name of the raster's value field (since capitalization varies
        across raster formats but may be necessary for certain operations)



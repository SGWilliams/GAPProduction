Python Library Documentation: module gapproduction.gapdb in gapproduction

NAME
    gapproduction.gapdb

FILE
    c:\python27\packages\gapproduction\gapproduction\gapdb.py

DESCRIPTION
    This module facilitates common tasks for querying the GAP Species Database
    and WHRdb.

FUNCTIONS
    AddSpecies(inTable, userName, pwd)
        (str, str, str) ->
        
        Adds a species to the GAP databases.
        
        Arguments:
        inTable -- The path of the table containing the relevant species information.
            a template table can be found at: ...\GAPage\data\SppToAdd_template\SppToAdd.csv.
            Please copy the table and fill in the appropriate fields as in the example
            species.
        userName -- A write-permission-granted user name for the Species Database
            and for the WHRDB.
        pwd -- The password matching the given user name.
    
    AllMUs(name=True, conus=True)
        ([boolean]) -> list
        
        Returns a list of all map units in the database.
        
        Arguments:
        name -- Optional boolean parameter indicating whether you wish to return
            a list of the ecological system names or of the map unit codes. By
            default, it is set to True, which means that the list will contain
            ecological system names. False will return map unit codes as integers.
        conus -- Optional boolean parameter indicating whether you wish to return
            only the map units that occur within CONUS or all map units.
    
    BreedingStates(spCode, abbr=False)
        (string) -> list
        
        Returns a list of the states in which the species has breeding range.
        
        Arguments:
        spCode -- the species' unique GAP ID
        abbr -- boolean indicating whether you wish to return postal code
            abbreviations of the states (default: False)
        
        Example:
        >>> BreedingStates("bGOEAx", True)
        ['OK', 'WY', 'AZ', 'OR', 'SD', 'CA', 'WA', 'ND', 'ID', 'NE', 'CO', 'TX',
        'MT', 'UT', 'NV', 'KS', 'NM']
    
    ConnectAnalyticDB(uid='', pwd='', server=r'CHUCK\SQL2014', trusted='Yes')
        Returns a cursor and connection within the Analytic Database.
    
    ConnectSppDB(uid='', pwd='', server=r'CHUCK\SQL2014', trusted='Yes')
        Returns a cursor and connection within the GAP species database.
    
    ConnectToDB(connectionStr)
        (str) -> cursor, connection
        
        Provides a cursor within and a connection to the database
        
        Argument:
        connectionStr -- The SQL Server compatible connection string for connecting
            to a database
        
        Example:
        >>> conString = """DRIVER=SQL Server Native Client 11.0;
                       SERVER={0};
                       UID={1};
                       PWD={2};
                       DATABASE=WHRdB;"""
        >>> cursor, connection = ConnectToDB(conString)
    
    ConnectWHR(uid='', pwd='', server=r'CHUCK\SQL2014', trusted='Yes')
        Returns a cursor and connection within the GAP WHRdb.
    
    ConservationConcern(spCode)
        (string) -> string/boolean
        
        Returns the species' conservation concern description, if it exists;
            otherwise, returns False
        
        Argument:
        spCode -- the species' unique GAP ID
        
        Example:
        >>> ConservationConcern('mNAROx')
        False
        >>> ConservationConcern('bBAEAx')
        'Long-term planning and responsibility, high percent of global population in single biome'
    
    Crosswalk(spCode)
        (string) -> tuple
        
        Returns a tuple of 4 items: GAP species code, ELCode, ITIS TSN, and
            Global_SEQ_ID
        
        Argument:
        spCode -- the species' unique GAP ID
        
        Example:
        >>> Crosswalk('mNAROx')
        (u'mNAROx', u'AMAJF10010', u'180549', 102243)
    
    Dict_SciNameToCode()
        () -> dict
        
        Returns a dictionary within which the keys are species scientific names and
          the keys are GAP codes
    
    ESA_Status(spCode)
        (string) -> string
        
        Returns the species' ESA status
        
        Argument:
        spCode -- the species' unique GAP ID
        
        Example:
        >>> ESA_Status('mNAROx')
        
        >>> ESA_Status('aABSAx')
        Candidate
    
    GapCase(spCode)
        (string) -> string
        
        Returns an input string in the Gap Code capitalization
        
        Argument:
        spCode -- the species' unique GAP ID
        
        Example:
        >>> GapCase('bbaeax')
        bBAEAx
        >>> GapCase('BbAEax')
        bBAEAx
        >>> GapCase('BBAEAX')
        bBAEAx
    
    ListAllSpecies(completedModels=False, CONUSOnly=False)
        [boolean] -> list
        
        Returns a list of all species from the species database, but note that the
        CONUSonly argument references the WHRDB.
        
        Argument:
        completedModels -- An optional, boolean parameter indicating whether you
            wish to return only species that have completed models. By default, it
            is set to False, meaning that all species will be returned.
    
    MUCode(muName)
        (str) -> int
        
        Returns the map unit code that matches the passed ecological system name.
        
        Argument:
        muName -- The map unit's code, as found in tblMapUnitDesc.strLSGapName.
        
        Example:
        >>> MUCode('Dry noncalcareous woodland')
        2812
    
    MUCodesToNames(muCodeList)
        (list) -> list
        
        Translates a list of map unit codes into a list of ecological system names.
            The passed codes can be either strings or integers.
        
        Argument:
        muCodeList -- A list of 4-digit map unit codes
        
        Example:
        >>> [2503, 2505, 2512]
        ['Bog Vegetation', 'Closed Hala Forest', 'Closed Kukui Forest']
    
    MUName(muCode)
        (int) -> str
        
        Returns the name of the ecological system that matches the passed map unit
            code.
        
        Argument:
        muCode -- The map unit's 4-digit code.
        
        Example:
        >>> MUName(2812)
        'Dry noncalcareous woodland'
    
    MUNamesToCodes(muNameList)
        (list) -> list
        
        Translates a list of map unit names into a list of ecological system codes.
        
        Argument:
        muCodeList -- A list of map unit names
        
        Example:
        >>> ['Bog Vegetation', 'Closed Hala Forest', 'Closed Kukui Forest']
        [2503, 2505, 2512]
    
    MUsWithKeyword(keyword)
        (str) -> list
        
        Returns a list of map units (as integers) that contain the keyword in their
        name or description
    
    ModelCompleted(spCode)
        (string) -> boolean
        
        Checks whether the species has a published model based on the species database
        
        Argument:
        spCode -- the species' unique GAP ID
        
        Example:
        >>> ModelCompleted("aNRLFx")
        True
    
    MuInRegion(mu, region)
        (string/int, string/int) -> boolean
        
        Returns a boolean indicating whether the map unit occurs within the region.
        
        Arguments:
        mu -- The GAP map unit code (as either an int or a string) or the map unit
            name.
        
        region -- The GAP region code (as either an int or a string) of interest.
            The function will also accept the region's two character abbreviation or
            its full name, as long as it matches those in the region dictionaries
            found within the dictionaries module.
        
        Examples:
        >>> gp.gapdb.MuInRegion("1402", "4")
        True
        >>> gp.gapdb.MuInRegion(1402, "4")
        True
        >>> gp.gapdb.MuInRegion(1402, "sw")
        True
        >>> gp.gapdb.MuInRegion(1402, "SOUTHWEST")
        True
        >>> gp.gapdb.MuInRegion('Atlantic Coastal Plain Northern Sandy Beach', 1)
        False
    
    MuRegions(mu)
        (string/int) -> list
        
        Returns a list of the GAP modeling regions (by numeric code) in which the
            map unit occurs.
        
        Argument:
        mu -- The GAP map unit code (as either an int or string) or the map unit
            name.
        
        Examples:
        >>> gp.gapdb.MuRegions('Open Water (Aquaculture)')
        ['6']
        >>> gp.gapdb.MuRegions(2103)
        ['1', '3', '4', '5', '6']
        >>> gp.gapdb.MuRegions("2103")
        ['1', '3', '4', '5', '6']
    
    NameClass(spCode)
        (string) -> string
        
        Returns the species' class
        
        Argument:
        spCode -- the species' unique GAP ID.
    
    NameCommon(spCode)
        (string) -> string
        
        Returns the species' common name
        
        Argument:
        spCode -- the species' unique GAP ID.
    
    NameFamily(spCode)
        (string) -> string
        
        Returns the species' family
        
        Argument:
        spCode -- the species' unique GAP ID.
    
    NameGenus(spCode)
        (string) -> string
        
        Returns the species' genus
        
        Argument:
        spCode -- the species' unique GAP ID.
    
    NameOrder(spCode)
        (string) -> string
        
        Returns the species' order
        
        Argument:
        spCode -- the species' unique GAP ID.
    
    NameSci(spCode)
        (string) -> string
        
        Returns the species' scientific name (Genus species [subspecies])
        
        Argument:
        spCode -- the species' unique GAP ID.
    
    NameSpecies(spCode)
        (string) -> string
        
        Returns the species' scientific species name
        
        Argument:
        spCode -- the species' unique GAP ID.
    
    NameSubspecies(spCode)
        (string) -> string
        
        Returns the subspecies name, if applicable; otherwise, returns
        an empty string
        
        Argument:
        spCode -- the species' unique GAP ID.
    
    ProcessDate(spCode, x='Model', y='Edited', seconds=False)
        (string, string, string, [boolean]) -> datetime object / float
        
        Gets the date that the species' range or model was created
        or last edited. Returns the date as a date data type.
        
        Arguments:
        spCode -- the species' unique GAP ID
        x -- indicates whether you wish to return the process date for the species'
            'model' or its 'range'; the default is 'model';
        y -- indicates whether you wish to return the date that the data was
            'edited' or 'created'; the default is 'edited';
        seconds -- an optional parameter indicating whether you wish the date to
            be returned as seconds since the epoch. By default, it is set to false.
        
        Example:
        >>> print ProcessDate("bBAEAx")
        2013-04-01 00:00:00
    
    RangeCompleted(spCode)
        (string) -> boolean
        
        Checks whether the species has a published range
        
        Argument:
        spCode -- the species' unique GAP ID
        
        Example:
        >>> RangeCompleted("aNRLFx")
        True
    
    SpInCONUS(code, publishedOnly=False)
        !!! This may not give the desired result!!!
        
        (sp, [bool]) -> bool
        
        Determine whether the species has a model in CONUS. Results are derived from
        entries in tblModelStatus within the WHRDb.
        
        Arguments:
        code - The species' 6-character GAP ID code
        publishedOnly - An optional, boolean parameter indicating whether you wish
          to test whether the species' CONUS models have already been published. By
          default, it is set to False, meaning that all models, regardless of
          publishing status, will be considered.
    
    SpInfoCombined(spCode, completionStatus=True)
        (string, [boolean]) -> tuple
        
        Returns the full info for the the species, including taxonomy, crosswalk,
            and range/model completion status.
        
        Refer to SpInfoCombinedHeaders() to get a list of the appropriate field
            headings
        
        Argument:
        spCode -- the species' unique GAP ID
        completionStatus -- an optional, boolean argument, indicating whether to
            include the range/model completion status in the output. By default, it
            is set to true, meaning that the status fields will be included.
        
        Example:
        >>> SpInfoCombined('abotox')
        ('aBOTOx', 'Amphibia', 'Anura', 'Bufonidae', 'Anaxyrus', 'boreas', '',
        'Anaxyrus boreas', 'Western Toad', 'AAABB01030', '773513', '102714', 'True', 'True')
    
    SpInfoCombinedHeaders(completionStatus=True)
        Returns a list of the fields names from the SpInfoCombined() function,
            in the proper order.
    
    SppInState(state, breedingOnly=False)
        !!!!!!!!!!!!!!!!!!!!!!  May not be working correctly.
        (string) -> list
        
        Gets a list of all the species that occur in the given state. Requires
            that the species have a published range in order to make the list.
        
        Note: The output omits species with only migratory range in the state as
            well as species that do not have a presence classification or 1, 2, or
            6.
        
        Arguments:
        state -- Can be either the state's two-character postal code or the full
            state name.
        breedingOnly -- An optional, boolean argument indicating whether you wish
            to return only species that breed within the state. The default is
            False, meaning that both breeding and non-breeding species will be
            included.
        
        Example:
        >>> SppInState('IN')
        [u'aETSAx', u'aFTSAx', u'aHELLa', u'aHELLx', u'aLESIx'...]
        >>> SppInState('Indiana', True)
        [u'aETSAx', u'aFTSAx', u'aHELLa', u'aHELLx', u'aLESIx'...]
    
    SppModelCompleted(state=False)
        ([state]) -> list
        
        Gets a list of all species with published models
        
        Argument:
        state -- An optional parameter indicating the state of interest. The two-
            letter state postal abbreviation or the full state name are valid. If
            no state is entered, the function will simply return all completed
            models.
    
    SppRangeCompleted(state=False)
        () -> list
        
        Gets a list of all species with published range
        
        Argument:
        state -- An optional parameter indicating the state of interest. The two-
            letter state postal abbreviation or the full state name are valid. If
            no state is entered, the function will simply return all completed
            models.
    
    States(spCode, abbr=False, migratory=False)
        (string) -> list
        
        Returns a list of the states in which the species has range.
        
        Arguments:
        spCode -- the species' unique GAP ID
        abbr -- boolean indicating whether you wish to return postal code abbreviations
            of the states. By default, this is set to False, which means that full
            state names will be returned.
        
        Example:
        >>> States("aNRLFx")
        [u'Oregon', u'California', u'Washington']
    
    States_SGCN(spCode, abbr=False)
        (string) -> list
        
        Returns a list of the states in which the species is a SGCN
        
        Arguments:
        spCode -- the species' unique GAP ID
        abbr -- boolean indicating whether you wish to return postal code abbreviations
            of the states (default: False)
        
        Example:
        >>> States_SGCN("aFFSAx")
        [u'Oregon', u'California', u'Washington']
    
    Taxonomy(spCode)
        (string) -> tuple
        
        Returns a tuple of 8 items: GAP species code, class, order, family,
        genus, species, subspecies, full scientific name, and common name.
        
        Argument:
        spCode -- the species' unique GAP ID.
        
        Example:
        >>> Taxonomy("abafrc")
        (u'aBAFRc', u'Amphibia', u'Anura', u'Craugastoridae', u'Craugastor',
        u'augusti', u'cactorum', u'Craugastor augusti cactorum', u'Western Barking Frog')
    
    UniqueMUs(inRegion, absentRegions=[1, 2, 3, 4, 5, 6])
        (string/integer, [list]) -> list
        
        Returns a list of ecological systems that occur within the region of
            interest but that do not occur in any of the indicated regions
            (i.e., those indicated in absentRegions).
        
        Arguments:
        inRegion -- Either a string or integer, indicating the numeric GAP modeling
            region code of the region of interest.
        absentRegions -- A list containing either strings or integers, indicating
            the numeric GAP modeling region code(s) of any region(s) from which
            the map unit must be absent to be included in the output. By default,
            the list includes all regions (though the inRegion is removed from the
            list), meaning that only map units that are unique to the inRegion will
            be returned.
    
    Who(spCode, action='edited')
        (string, action) -> string
        
        Gets the name of the staff member who completed an action of interest.
        
        Notes:
        This function queries the WHRdb tblModelStatus table, which has rows for each region-
            season model, not strUC.  It grabs (I believe) the first record of the query
            result.  It would ideally query the species database, but the table there is not 
            up to date.
        
        Arguments:
        spCode -- the species' unique GAP ID
        action -- The action of interest.  Choose from "edited", "mosaiced", "reviewed", 
            "published".
        
        Example:
        >>> print WhoReviewed("bBAEAx", action="reviewed")
        "Jeff Lonneker"

DATA
    staffDict = {'': 'Unknown', ' ': 'Unknown', 'ar': 'Rob Adair', 'jjl': ...
    stateDict_From_Abbr = {'AK': 'Alaska', 'AL': 'Alabama', 'AR': 'Arkansa...
    stateDict_To_Abbr = {'Alabama': 'AL', 'Alaska': 'AK', 'American Somoa'...
    taxaDict = {'a': 'Amphibians', 'b': 'Birds', 'm': 'Mammals', 'r': 'Rep...



Python Library Documentation: module gapproduction.gaprange in gapproduction

NAME
    gapproduction.gaprange

FILE
    t:\scripts\gapproduction\gapproduction\gaprange.py

DESCRIPTION
    ## This module facilitates common tasks involving GAP ranges.
    ##
    ## Public variables:
    ##
    ## HUCs -- The path to the CONUS HUCs shapefile
    ##
    ## Public functions:
    ##
    ## RangeTable() -- Create a comma-delimited table of the species' range, with
    ##      fields for HUC12 code, presence, origin, season, and reproductive use.
    ##
    ## RangeShp() -- Create a shapefile of the species' range
    ##
    ## EcoSysInRange() -- Gets a list of ecological systems that occur within the
    ##      species' range
    ##
    ## ListIntroducedSpp() -- Gets a list of species that have any introduced range
    ##
    ## PublishRanges() -- Publish ranges for a list of species
    ##
    ## GetEndemics() -- Get a list (table) of species endemic to a polygon (shapefile)
    ##
    ## SppInAOI() -- Get a list of species occuring in an area of interest (shapefile)
    ##
    ##

FUNCTIONS
    EcoSysInRange(sp, season=1, regions=[])
        (str, [int], [list]) -> list
        
        Returns a list of ecological systems that occur within the species range.
        
        Arguments:
        sp -- The species six-character GAP code.
        season -- An optional parameter representing the integer code for the season
            of interest. By default, the function only searches within year-round
            range. If you pass either 3 or 4 (winter or summer), the script will
            also search within year-round range, as this function is intended for
            use in setting model parameters.
        regions -- A list of the GAP modeling regions, indicated by region number,
            that you wish to be considered in the analysis. By default, the function
            will determine the regions in which the species occurs, and it will
            process all relevant regions.
    
    GetEndemics(extentShapefile, shpHucs, workDir, keyword)
        (string, string, string) -> string & saved csv file.
                             
            Use this to create a CSV file of species' (including subspecies)
        whose ranges are endemic to a specified input AOI shapefile.
        Generally, the AOI shapefile should be a single polygon. The script
        uses a select by location function in which 12-digit HUCs are
        selected that are completely within the AOI shapefile. If there
        is more than one polygon, the selections will be made within each
        individual polygon - i.e. there will by multiple selections as
        opposed to one continuous set of HUCs.
        The shapefile must have projection and coordinate system that 
        matches the 12-digit HUC shapefile from which species' ranges are
        derived.
        
        The final CSV file will contain the following fields:
        Species Code
        Scientific Name
        Common Name
        
        NOTE: Be careful with this function, finding endemics may be more 
        difficult than it seems. This obviously does not take into account 
        species' ranges outside CONUS since GAP ranges are not complete outside
        the lower 48 (with some AK, HI, PR exceptions). And, obviously again, this
        does not take into consideration ranges in other countries during
        different seasons. It would be possible to alter this script to
        look for seasonal endemism. As currently written, the sql query
        to get HUC range data includes all seasons and known, possibly,
        and potentially present ocurrence status.  Also, bear in mind that you
        may need to take extra caution regarding endemic species that are 
        distributed up to the edges of oceans.
        
        Arguments:
        extentShapfile -- A designated AOI shapefile with projection and coordinate
                    system to match the 12-digit HUC range shapefile.
        shpHucs -- A 12-digit HUC range shapefile.
        workDir -- Where to save the csv file (KeywordEndemicSpecies.txt)
        keyword -- Keyword to use in output file name, whatever you want that to be.
        
        Example:
        >> csvPath = GetEndemics(extent="T:/Project/ProjectExtent.shp",
                                               workDir='T:/Project/',
                                               shpHUCs="T:/hucs.shp",
                                               keyword="ThisProject")
    
    ListCONUSEndemics()
        () -> list
        
        Gets a list of GAP species codes for all species/subspecies that are endemic to CONUS.
    
    ListIntroducedSpp(anyIntroducedHUCs=True)
        () -> list
        
        Gets a list of GAP species codes for all species/subspecies that have any
            introduced range.
        
        Arguments:
        
        anyIntroducedHUCs - Boolean argument indicating whether species with any
            introduced range--as opposed to all introduced range--are returned.
            By default, it is set to True, meaning that species with even a single
            introduced HUC among any number of native or reintroduced HUCs will be
            returned.
    
    PublishRanges(spp)
        (list) -> insertion of records into table
        
        "Publishes" ranges for the species in the list provided.  Records for each species
            are deleted from published table and deep storage, then are replaced with new
            records from the temporary range tables.
            
        Arguments:
        spp -- a python list of species codes (strUC) to process.
        
        Example:
        >>> PublishRanges(["aadsax", "aamtox"])
    
    RangeShp(sp, outDir=r'T:\Scripts', dissolve=False, state=False, includeMigratory=True, includeHistoric=True, HUCs=True)
        (string, string, [boolean], [string], [boolean], [boolean], [boolean]) -> string
        
        Creates a shapefile of the species' range and returns the full absolute
            path to the shapefile.
        
        Arguments:
        sp -- The species' six-character unique GAP code
        outDir -- The directory within which you wish to place the output shapefile
        dissolve -- Optional argument; a boolean indicating whether you wish to
            dissolve the output. The default is False.
        state -- An optional parameter to indicate a state to which you wish to
            limit the result
        includeMigratory -- An optional, boolean parameter indicating whether to
            include migratory range in the output. By default, it is set to True
        includeHistoric -- An optional, boolean parameter indicating whether to
            include historic/extirpated range in the output. By default, it is set
            to True
        HUCs -- An optional, boolean parameter only effective when state is not
            False. Indicates whether you wish to clip the range to the HUCs that
            intersect the passed state (True) or to the administrative boundaries of
            the state (False). By default, it is set to True.
        
        Example:
        >>> RangeShp('mNAROx', 'My_ranges')
    
    RangeTable(sp, outDir, state=False, includeMigratory=True, includeHistoric=True)
        (string, string, [boolean], [boolean], [boolean]) -> string
        
        Creates a comma-delimited text file of the species' range, with fields indicating
            12-digit HUC, origin, presence, reproductive use, and seasonality. Returns
            the full, absolute path to the output text file.
        
        Arguments:
        sp -- The species six-character unique GAP code
        outDir -- The directory within which you wish to place the output text file
        state -- An optional parameter to indicate a state to which you wish to
            limit the result
        includeMigratory -- An optional boolean parameter indicating whether to
            include migratory range in the output. By default, it is set to True
        includeHistoric -- An optional boolean parameter indicating whether to
            include historic/extirpated range in the output. By default, it is set
            to True
        
        Example:
        >>> RangeTable('mNAROx', 'My_Range_Folder')
    
    SppInAOI(AOIShp, hucShp, workDir, origin, season, reproduction, presence)
        (string, string, string, string, list, list, list, list) -> list
        
        Returns a list of species occurring within the provided polygon.  Runtime
        is about 3-5 minutes.
        
        Arguments:
        AOIShp -- A shapefile polygon (dissolved) to investigate.  Should have 
            the same coordinate systems as the huc shapefile.
        hucShp -- A 12 digit huc shapefile that matches the GAP species database hucs.
        workDir -- Where to work and save output.
        origin -- Origin codes to include.
        season -- Season codes to include.
        reproduction -- Reproduction codes to include.
        presence -- Presence codes to include.
        
        Example:
        >>> sppList = SppInPolygon(AOIShp = "T:/Temp/BlueMountains2.shp",
                                   hucShp = config.hucs,
                                   workDir = "T:/Temp/",
                                   origin = [1],
                                   season = [1, 3, 4],
                                   reproduction = [1, 2, 3],
                                   presence = [1, 2, 3])

DATA
    HUCs = 'P:/Proj3/USGAP/Vert/Model/data/HucRng/Hucs.shp'



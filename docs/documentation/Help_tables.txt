Python Library Documentation: module gapproduction.tables in gapproduction

NAME
    gapproduction.tables

FILE
    t:\scripts\gapproduction\gapproduction\tables.py

DESCRIPTION
    ## This module facilitates common tasks for searching/manipulating plain text
    ## tables.
    ##
    ##
    ## The public functions are:
    ##
    ## DetermineDelimiter() - Attempts to determine the delimiter used in a table
    ##      file.
    ##
    ## DictionaryOfCells() - Creates a dictionary in which the keys are tuples of
    ##      the row header and the column header and the value is the value found at
    ##      the cell identified by that row/column intersection.
    ##
    ## DictionaryFromColumns() - Creates a dictionary with pairs from any two
    ##      selected fields in a table.
    ##
    ## DictionaryFromTable() - Creates a dictionary for which the key is the content
    ##      from the selected column, and the value is a tuple of the content from
    ##      all other columns in the table.
    ##
    ## ListHeaders() - Returns a list containing the table's field headers/column
    ##      names
    ##
    ## ListValues() -- Returns a list of all values that occur in the given field.
    ##
    ## ListFromTable() - Creates a list of lists from the passed table.
    ##
    ## WriteSppTable() - Creates a table (including headings) with the taxonomic and
    ##      crosswalking info as well as the GAP range/model status for all the
    ##      input species.
    ##
    ## WriteListToCsv() - Writes the passed list to a csv table
    ##
    ## WriteDictToTable() - Writes the passed dictionary to a csv table
    ##
    ## AttributeTableToCsv() - Exports the attribute table from the passed
    ##      shapefile, feature class, raster, or geodatabase table to a csv.
    ##

FUNCTIONS
    AttributeTableToCsv(layer, outputFile, keepOID=True, keepShape=False)
        (str, str, [bool], [bool]) -> str
        
        Exports the attribute table from the passed shapefile, feature class, raster,
            or geodatabase table to a csv. Returns the output csv path.
        
        Arguments:
        layer -- The path to the shapefile, feature class, raster, or geodatabase
           table, the attribute table of which will be written to a csv
        outputFile -- The path/name of the csv table you wish to create. Note that
           if a file already exists at that location, the rows (inclusive of the
           field names) will be appended to the existing table.
        keepOID -- An optional, boolean parameter, indicating whether you wish for
           each record's Object ID to be included in the output table. By default,
           it is set to True, meaning that the Object ID will be included.
        keepShape -- An optional, boolean parameter, indicating whether you wish for
           each record's shape object to be included in the output. By default, it
           is set to False, meaning that the shape information will not be included.
           Note that for polygons and/or lines, the shape objects can be quite
           large, as they contain the coordinates of every vertex.
    
    DetermineDelimiter(document)
        (string) -> string/boolean
        
        Returns the delimiter used in the document. Returns False if the delimiter
        cannot be deciphered.
        
        Note that it is possible for a document to be structured in such a way that
        it appears to be delimited by a character that was not intended as the
        delimiter (just open any document into Microsoft Excel, and you'll see that
        programmers far greater than me have still not resolved this issue.
        
        This function will only identify tabs, commas, semi-colons, colons, spaces,
        double dashes, or a single dash as the delimiters, and it will search in
        that order.
        
        Example:
        >>> DetermineDelimiter('test.csv')
        ,
    
    DictionaryFromColumns(table, keyColumn, valueColumn, includeHeaders=True)
        (string, string/integer, string/integer, [string], [string]) -> dictionary
        
        Returns a dictionary of the values from the selected fields in a table.
        
        Note: This function is to return a dictionary in which the value represents
        a single column from the table. If you want the dictionary's values to hold
        all columns from the table (i.e., the value is a tuple), use the
        DictionaryFromTable() function (though that function currently only handles
        txt files).
        
        Also, a float cannot be used as a dictionary key; therefore, if the user
        passes a field containing floats as the key field, the floats will be
        converted to strings in the dictionary.
        
        Further, if the passed keyColumn does not contain unique values in every
        row, not all relevant data from the table will be contained in the
        output dictionary.
        
        Works on csv, txt, Excel, or ArcGIS files.
        
        Arguments:
        document -- The absolute path to the table file.
        keyColumn -- The header text or the 0-based index of the column that will be
            assigned as the dictionary key.
        valueColumn -- The header text or the 0-based index of the column that will
            be assigned as the dictionary value.
        
        Examples:
        >>> DictionaryFromColumns('test.csv', 'eng', 3, 'o')
        {'four': 'quatro', 'two': 'dos', 'one': 'uno'}
        >>> DictionaryFromColumns('test.txt', 1, 'span')
        {'num': 'span', '1': 'uno', '3': 'tres', '2': 'dos', '5': 'cinco', '4': 'quatro'}
    
    DictionaryFromTable(document, keyColumn, keyWildcard='', delimiter='', includeHeaders=True)
        (string, string/integer, string/integer, [string], [string], [boolean]) -> dictionary
        
        Returns a dictionary from a table. The key is the content from the column
        submitted as the second argument; the value is a tuple of the content from
        all other columns in the table.
        
        Note: If you wish for the dictionary's values to contain the information
        from only one column in the table, use the DictionaryFromColumns() function.
        
        Arguments:
        document -- The full, absolute path to the table file.
        keyColumn -- The header text or 0-based index of the column that will be
            assigned as the dictionary key.
        keyWildcard -- An optional argument to specify a string of text that must
            appear in the key field for that row to be included in the dictionary.
        delimiter -- An optional argument to specify the table's delimiting
            character/string. If none entered, the script will attempt to determine
            the delimiter on its own.
        includeHeaders -- An optional, boolean parameter to indicate whether you
            wish for the table's headers (the first row in the table) to be included.
            By default, it is set to True, meaning that headers will be included
            in the returned dictionary.
        
        Examples:
        >>> DictionaryFromTable('test.txt', 1)
        {'eng': ('num', 'span'), 'three': ('3', 'tres'), 'one': ('1', 'uno'), 'four': ('4', 'quatro'), 'five': ('5', 'cinco'), 'two': ('2', 'dos')}
        >>> DictionaryFromTable('test.txt', 2, 'o')
        {'dos': ('2', 'two'), 'cinco': ('5', 'five'), 'quatro': ('4', 'four'), 'uno': ('1', 'one')}
    
    DictionaryOfCells(table, rowHeaderColumn=0)
        (str) -> dictionary
        
        Creates a dictionary in which the keys are tuples of the row header and the
          column header and the value is the value found at the cell identified by
          that row/column intersection.
        
          Note that the meaningfulness of the output dictionary relies on the first
          row and the first column (or the rowHeaderColumn) in the table containing
          unique identifiers/field names.
        
        Arguments:
        table - The path/name of the table from which you would like to create a
          dictionary.
        rowHeaderColumn - The column header or the zero-based index of the column
          from which you wish to extract row headers. That is, if the first column
          in your table is an OID, but for easier interpretation, you'd prefer to
          use a user-assigned field, named "PointID", you could pass either "PointID"
          or the index of the column (i.e., if it's the last column, pass -1; if it's
          the third column, pass 2). Values from this column will then occur in the
          dictionary keys (along with column headers).
        
        Example:
        given a table (t) that looks like:
        PointID   State   SurveyCount
        293       IN      3
        495       IL      46
        >>> DictionaryOfCells(t)
        {('495', 'State'): 'IL', ('293', 'SurveyCount'): '3', ('293', 'State'): 'IN', ('495', 'SurveyCount'): '46'}
        >>> gap.tables.DictionaryOfCells(t, 'State')
        {('IN', 'SurveyCount'): '3', ('IL', 'PointID'): '495', ('IN', 'PointID'): '293', ('IL', 'SurveyCount'): '46'}
    
    GetColumnIndex_excel(table, field)
        # Identify the index for the passed field/column name in an Excel file
    
    ListFromTable(table, includeHeaders=True, delimiter='\t')
        (str) -> list
        
        Returns all the records from the table as a list of lists.
        
        Argument:
        table -- File from which you wish to return the records
        includeHeaders -- An optional, boolean parameter to indicate whether you
             wish to include the table headers (assumed to be the first row in csv,
             txt, and Excel files) as the first nested list. By default, it is set
             to True, meaning that the headers will be included.
        
        Example:
        >>> ListFromTable('testTable.csv')
        [['001','bbaeax','Bald Eagle'],['002','mnarox','River Otter']]
    
    ListHeaders(table)
        (str) -> list
        
        Returns a list of the table's field headings/column names.
        
        Argument:
        table - The file from which you wish to identify the headers.
        
        Example:
        >>> ListHeaders('testTable.csv')
        ['UID','SpCode','Common_Name']
    
    ListValues(table, field, unique=False)
        (str, str, [boolean]) -> list
        
        Returns a list of all values for the given field within the given table.
            Operates on csv, txt, xlsx, xls, and shp files, as well as geodatabase
            feature classes.
        
            Note: This function assumes that the first row contains field headings.
        
        Arguments:
        table -- Name/path of the file from which you wish to identify values
        field -- Name of the field/column from which you wish to identify values
        unique -- An optional boolean, indicating whether you wish to remove        repeated values. By default, it is set to False, indicating that
            duplicates will not be reduced.
    
    WriteDictToTable(dictionary, outputFile, delimiter=',', headerKey=False, headerValue=False, overwrite=True)
        (dict, str, [str], [str], [str], [boolean])
        
        Writes the passed dictionary to a table.
        
        Arguments:
        dictionary -- The dictionary from which you wish to extract values to write.
        
        outputFile -- The path to/name of the file to which you wish to write the
            table.
        
        delimiter -- An optional parameter indicating the delimiter you wish to use
            in the output table. By default, it is set as a comma.
        
        headerKey -- An optional parameter through which you can pass a header to
            to write to the output table for the dictionary's keys.
        
        valueKey -- An optional parameter through which you can pass a header to
            to write to the output table for the dictionary's values.
        
        overwrite -- An optional parameter indicating whether you wish to overwrite
            existing records that may exist in the passed outputFile. By default, it
            is set to true, meaning that the files will be completely overwritten.
    
    WriteListToCsv(inputList, outputFile, headers=False)
        (list/tuple, str, [list]) -> str
        
        Write a list or a list of lists to a csv.
        
        Parameters:
        
        inputList -- A list containing the content to be written to the document.
            If the input list is a list of lists (or a tuple of tuples), each
            sub-list will be written as its own row. If the input list is of strings
            and/or numbers, the entire input list will be written as a single row.
        outputFile -- The path to the csv file to which the data will be written.
        headers -- An optional parameter containing the column headings to be
            written to the table. By default, no headings are required, but the
            first sublist in the input list can be treated as the heading row.
    
    WriteSppTable(outTable, spp, delimiter=',')
        (string, list, [string]) -> string
        
        Creates a table of the full taxonomic, crosswalking, and range/model status
            info for all the species in the passed list.
        
        Arguments:
        outTable -- The file to which you wish to write the table.
        spp -- A list of GAP species codes
        delimiter -- An optional parameter to indicate the character(s) with which
            you wish to delimit the table. The default value is ",".
        
        Example:
        >>> WriteSppTable(r'MyTable.txt', ['mNAROx', 'bbaeax', 'ABOTOX'], ' ')



Python Library Documentation: module gapproduction.sciencebase in gapproduction

NAME
    gapproduction.sciencebase - Functions to use for connecting to and interacting with ScienceBase

FILE
    c:\python27\packages\gapproduction\gapproduction\sciencebase.py

FUNCTIONS
    AttachFile(strUC, filePath, action='replace')
        (string, string, string, string) -> string 
        
        Uploads a file to a species' habitat map ScienceBase item. Returns the
            ID of the item that it attached to.
        
        NOTE: This currently only works for habmaps but will be revised offer a 
            range option.
        
        Arguments:
        strUC -- gap species code
        filePath -- path to the file
        action -- choose "replace" or "create". Create will add the file in addition
            to whatever is already attached, even if a file has the same name.  
            Replace will replace any existing attachements of the same name as your
            file.  
        
        Example:
        >>
    
    ConnectToSB(username='nmtarr@ncsu.edu', password='Aa%6g$efjvvv')
        (string) -> connection to ScienceBase
        
        Creats a connection to ScienceBase. You will have to enter your password.
        
        Arguments:
        username -- your ScienceBase user name.
        
        Example:
        >> connection = ConnectToSB(username="ntarr@usgs.gov")
    
    GetHabMapDOI(strUC)
        (string) -> string
        
        Returns the ScienceBase DOI for the habitat map of the passed
        species/strUC.
        
        Arguments:
        strUC -- A gap species code ("mSEWEx")
        
        Example:
        >> id = GetHabMapDOI("bAMROx")
    
    GetHabMapID(strUC)
        (string) -> string
        
        Returns the ScienceBase Item ID for the habitat map of the passed
        species/strUC.
        
        Arguments:
        strUC -- A gap species code ("mSEWEx")
        
        Example:
        >> id = GetHabMapID("bAMROx")
    
    GetHabMapURL(strUC)
        (string) -> string
        
        Returns the ScienceBase URL for the habitat map of the passed
        species/strUC.
        
        Arguments:
        strUC -- A gap species code ("mSEWEx")
        
        Example:
        >> url = GetHabMapURL("bAMROx")
    
    HabMapItemCSV(species, publicationDate, csvName)
        (list, integer, string) -> pandas DataFrame and saved CSV file.
        
        Creates a dataframe and csv file with rows for species in your list and columns for
            each of the pieces of information needed when updating metadata records on 
            ScienceBase for habitat maps.
        
        Notes:
        The "end_date" column pulls from tblUpdateDateTime, but it's unclear how this table
            is and was populated.  Many entries are blank, so this function uses 2013 if the
            model editing field is blank.
        
        Arguments:
        species -- Python list of GAP species codes to process
        publicationDate -- A year to use as the publication date
        csvName -- Path and name of where to save csv file
        
        Example:
        >>>DF = HabMapItemCSV(["aAMBUx", "bCOHAx", "bAMROx", "bCOMEx"], 
                                   publicationDate = 2017, csvName="T:/temp/SBTable.csv")
    
    ListHabitatMapIDs()
        () -> list
        
        Returns a list of habitat map IDs by listing child items of the top
        level ScienceBase item for the GAP habitat maps.
        
        Example:
        >> mapIDs = HabitatMapIDs()
    
    SaveModelJSON(species, saveDir, year=2001, version=1)
        (string, string, integer, integer) -> dictionary
        
        Builds a species or subspecies-level dictionary of all the relevant 
            information for a habitat modeling.  The dictionary format is for
            ScienceBase.  Returns the dictionary and saves a copy as a json file
            in the directory you provide.
        
        Arguments:
        species -- gap species code
        saveDir -- a directory to save json files in
        year -- the year of the data used in modeling (2001 or 2011)
        version -- the version number of the model (at the species level)
        
        Example:
        >>test = SaveModelJSON("bAMROx", saveDIR="C:/Temp", year=2001, version=1)

DATA
    habMapCollectionItem = '527d0a83e4b0850ea0518326'


